#!/usr/bin/env ruby
#
# $Id: review-vol 3761 2007-12-31 07:20:09Z aamine $
#
# Copyright (c) 2003-2007 Minero Aoki
#
# This program is free software.
# You can distribute or modify this program under the terms of
# the GNU LGPL, Lesser General Public License version 2.1.
# For details of the GNU LGPL, see the file "COPYING".
#

require 'pathname'

bindir = Pathname.new(__FILE__).realpath.dirname
$LOAD_PATH.unshift((bindir + '../lib').realpath)

require 'review/env'
require 'review/book'
require 'review/exception'
require 'optparse'

def main
  $KCODE = 'EUC' unless defined?(Encoding)

  parts_sensitive = false
  parser = OptionParser.new
  parser.on('-p', '--parts', 'Print kbytes of each parts.') {
    parts_sensitive = true
  }
  parser.on('--help', 'Print this message and quit') {
    puts parser.help
    exit 0
  }
  begin
    parser.parse!
  rescue OptionParser::ParseError => err
    $stderr.puts err.message
    $stderr.puts parser.help
    exit 1
  end

  vols = []
  ReVIEW.env.parts.each_with_index do |chaps, part_idx|
    vols.push []
    if parts_sensitive
      puts "Part #{part_idx + 1}"
      puts
    end
    chaps.each do |chap|
      vols.last.push chap.volume
      print_chapter_volume chap
    end
    if parts_sensitive
      puts ReVIEW::Volume.sum(vols.last)
      puts
    end
  end
  puts unless parts_sensitive
  puts "Total #{ReVIEW::Volume.sum(vols.flatten)}"
rescue ReVIEW::ApplicationError, Errno::ENOENT => err
  raise if $DEBUG
  $stderr.puts "#{File.basename($0)}: #{err.message}"
  exit 1
end

def print_chapter_volume(chap)
  printf "%s %3dKB %5dC %4dL  %s %-s\n",
         chapnumstr(chap.number), chap.kbytes, chap.n_chars, chap.n_lines,
         "#{chap.name} ".ljust(16, '.'), chap.title
end

def chapnumstr(n)
  n ? sprintf('%2d.', n) : '   '
end

main
