#!/usr/bin/env ruby
#
# $Id: review-index 3906 2008-02-14 06:58:59Z kmuto $
#
# Copyright (c) 1999-2007 Minero Aoki
#
# This program is free software.
# You can distribute or modify this program under the terms of
# the GNU LGPL, Lesser General Public License version 2.1.
# For details of the GNU LGPL, see the file "COPYING".
#

require 'pathname'

bindir = Pathname.new(__FILE__).realpath.dirname
$LOAD_PATH.unshift((bindir + '../lib').realpath)

require 'review/book'
require 'review/env'
require 'review/tocprinter'
require 'optparse'

def main
  Signal.trap(:INT) { exit 1 }
  Signal.trap(:PIPE, 'IGNORE')
  _main
rescue Errno::EPIPE
  exit 0
end

def _main
  $KCODE = 'EUC' unless defined?(Encoding)

  printer_class = ReVIEW::TextTOCPrinter
  chaps = nil
  upper = ReVIEW::TOCPrinter.default_upper_level
  parser = OptionParser.new
  parser.on('-a', '--all', 'print all chapters.') {
    begin
      chaps = ReVIEW.env.chaps
    rescue ReVIEW::Error => err
      error_exit err.message
    end
  }
  parser.on('-s', '--section N', 'list only section N.') {|n|
    chaps = ReVIEW.env.parts[Integer(n) - 1] or
        error_exit "section #{n} does not exist in this book"
  }
  parser.on('-l', '--level N', 'list upto N level (1..4, default=4)') {|n|
    upper = Integer(n)
    unless (0..4).include?(upper)  # 0 is hidden option
      $stderr.puts "-l/--level option accepts only 1..4"
      exit 1
    end
  }
  parser.on('--text', 'output in plain text (default)') {
    printer_class = ReVIEW::TextTOCPrinter
  }
  parser.on('--html', 'output in HTML') {
    printer_class = ReVIEW::HTMLTOCPrinter
  }
  parser.on('--idg', 'output in InDesign XML') {
    printer_class = ReVIEW::IDGTOCPrinter
  }
  parser.on('--help', 'print this message and quit.') {
    puts parser.help
    exit 0
  }
  begin
    parser.parse!
  rescue OptionParser::ParseError => err
    $stderr.puts err.message
    $stderr.puts parser.help
    exit 1
  end
  if chaps and not ARGV.empty?
    error_exit '-a/-s option and file arguments are exclusive'
  end

  begin
    book = ReVIEW::Book.parse_entries(ReVIEW::Entry.cmdline_intern(chaps))
  rescue ReVIEW::Error, Errno::ENOENT => err
    raise if $DEBUG
    error_exit err.message
  end
  printer_class.new(upper).print_book book
end

def error_exit(msg)
  $stderr.puts "#{File.basename($0)}: #{msg}"
  exit 1
end

main
