#!/usr/bin/env ruby
#
# $Id: review-compile 3928 2008-03-05 07:42:19Z kmuto $
#
# Copyright (c) 1999-2007 Minero Aoki
#
# This program is free software.
# You can distribute or modify this program under the terms of
# the GNU LGPL, Lesser General Public License version 2.1.
# For details of the GNU LGPL, see the file "COPYING".
#

require 'pathname'

bindir = Pathname.new(__FILE__).realpath.dirname
$LOAD_PATH.unshift((bindir + '../lib').realpath)

require 'review/compiler'
require 'review/env'
require 'fileutils'
require 'optparse'

def main
  Signal.trap(:INT) { exit 1 }
  Signal.trap(:PIPE, "IGNORE")
  _main
rescue Errno::EPIPE
  exit 0
end

def _main
  $KCODE = 'EUC' unless defined?(Encoding)

  mode = :files
  basedir = nil
  if /\Areview2/ =~ File.basename($0)
    target = File.basename($0, '.rb').sub(/review2/, '')
  else
    target = nil
  end
  check_only = false

  @@secnolevel = 2; # default level of section number

  parser = OptionParser.new
  parser.banner = "Usage: #{File.basename($0)} [--target=FMT]"
  parser.on('-c', '--check', 'Check manuscript') {
    check_only = true
  }
  unless target
    parser.on('--target=FMT', 'Target format.') {|fmt|
      target = fmt
    }
  end
  parser.on('-a', '--all', 'Compile all chapters.') {
    mode = :dir
    basedir = nil
  }
  parser.on('--level=LVL', 'Section number level.') {|lvl|
    @@secnolevel = lvl.to_i
  }
  parser.on('--directory=DIR', 'Compile all chapters in DIR.') {|path|
    mode = :dir
    basedir = path
  }
  parser.on('--help', 'Prints this message and quit.') {
    puts parser.help
    exit 0
  }
  begin
    parser.parse!
    unless target
      if check_only
        target = 'html'
      else
        raise OptionParser::ParseError, "no target given"
      end
    end
  rescue OptionParser::ParseError => err
    error err.message
    $stderr.puts parser.help
    exit 1
  end

  begin
    compiler = ReVIEW::Compiler.new(load_strategy_class(target, check_only))
    case mode
    when :files
      if ARGV.empty?
        error 'no input'
        exit 1
      end
      envs = {}
      ARGV.each_with_index do |path, idx|
        basedir = File.dirname(path)
        env = (envs[basedir] ||= ReVIEW::Environment.load(basedir))
        str = compiler.compile(env.chapter(File.basename(path, '.*')))
        print str unless check_only
      end
    when :dir
      env = basedir ? ReVIEW::Environment.load(basedir) : ReVIEW.env
      env.chaps.each do |chap|
        str = compiler.compile(chap)
        write "#{chap.name}#{compiler.strategy.extname}", str  unless check_only
      end
    else
      raise "must not happen: #{mode}"
    end
  rescue ReVIEW::ApplicationError => err
    raise if $DEBUG
    $stderr.puts err.message
    exit 1
  end
end

def error(msg)
  $stderr.puts "#{File.basename($0, '.*')}: error: #{msg}"
end

def load_strategy_class(target, strict)
  require "review/#{target}builder"
  ReVIEW.const_get("#{target.upcase}Builder").new(strict)
end

def write(path, str)
  File.open(path, 'w') {|f|
    f.puts str
  }
end

main
